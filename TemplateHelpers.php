<?php
declare(strict_types=1);

namespace Webiik\Framework;

use Webiik\Router\Route;
use Webiik\Router\Router;
use Webiik\Translation\Translation;

class TemplateHelpers
{
    /**
     * @var Router
     */
    private $router;

    /**
     * @var Route
     */
    private $route;

    /**
     * @var Translation
     */
    private $translation;

    /**
     * JSON with all application assets generated by Webpack
     * @var
     */
    private $assets;

    /**
     * Helpers constructor.
     * @param Router $router
     * @param Route $route
     * @param Translation $translation
     */
    public function __construct(Router $router, Route $route, Translation $translation)
    {
        $this->router = $router;
        $this->route = $route;
        $this->translation = $translation;
    }

    /**
     * Return HTML with react component
     * @return callable
     */
    public function reactComponent(): callable
    {
        return function (string $name, array $props, array $options = []): string {
            // Server-ready JS for current route
            $routeName = $this->route->getName();
            $script = WEBIIK_BASE_DIR . '/frontend/app/build/server/' . $routeName . '-iso.js';

            // Render JS on (server and) client
            $ssr = new \Webiik\Ssr\Ssr();
            $ssr->useEngine(new \Webiik\Ssr\Engines\V8js());
            return $ssr->render($script, $name, $props, $options);
        };
    }

    /**
     * Generate HTML tags with all JS includes for $route
     * @return callable
     */
    public function getJs(): callable
    {
        return function (string $route): string {
            $html = '';
            $isoRoute = $route . '-iso';
            foreach ($this->getAssets() as $iRoute => $obj) {
                if ($iRoute == '_app' || $iRoute == $route || $iRoute == $isoRoute) {
                    foreach ($obj->js as $link) {
                        $html .= '<script src="' . WEBIIK_BASE_PATH . 'assets/app/' . $link . '"></script>';
                    }
                }
            }
            return $html;
        };
    }

    /**
     * Generate HTML tags with all CSS includes for $route
     * @return callable
     */
    public function getCss(): callable
    {
        return function (string $route): string {
            $html = '';
            $isoRoute = $route . '-iso';
            foreach ($this->getAssets() as $iRoute => $obj) {
                if ($iRoute == '_app' || $iRoute == $route || $iRoute == $isoRoute) {
                    foreach ($obj->css as $link) {
                        $html .= '<link rel="stylesheet" href="' . WEBIIK_BASE_PATH . 'assets/app/' . $link . '" type="text/css">';
                    }
                }
            }
            return $html;
        };
    }

    /**
     * Get current route name
     * @return callable
     */
    public function getRoute(): callable
    {
        return function (): string {
            return $this->route->getName();
        };
    }

    /**
     * Get URL by route name and route parameters
     * @return callable
     */
    public function getURL(): callable
    {
        return function (string $route, array $parameters = [], string $lang = WEBIIK_LANG): string {
            return $this->router->getURL($route, $parameters, $lang);
        };
    }

    /**
     * Get translation by key
     * @return callable
     */
    public function _t()
    {
        return function (string $key, $context = null) {
            return $this->translation->get($key, $context);
        };
    }

    /**
     * Get JSON with all application assets generated by Webpack
     * @return object
     */
    private function getAssets(): object
    {
        if ($this->assets) {
            // Get assets from cache
            $assets = $this->assets;
        } else {
            // Cache assets
            $this->assets = json_decode(file_get_contents(WEBIIK_BASE_DIR . '/frontend/assets/build/assets.json'));
        }
        return $assets;
    }
}